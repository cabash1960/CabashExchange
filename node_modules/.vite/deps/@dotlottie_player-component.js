import {
  I,
  Zi,
  en,
  g,
  nn,
  tn,
  wn
} from "./chunk-AQ5T3PGI.js";
import {
  j
} from "./chunk-ZDQLDPZ4.js";
import {
  __publicField
} from "./chunk-WXXH56N5.js";

// node_modules/@dotlottie/player-component/dist/chunk-2TNWIAJO.mjs
var N = window;
var R = N.ShadowRoot && (N.ShadyCSS === void 0 || N.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var M = Symbol();
var tt = /* @__PURE__ */ new WeakMap();
var S = class {
  constructor(t, e, o) {
    if (this._$cssResult$ = true, o !== M)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t, this.t = e;
  }
  get styleSheet() {
    let t = this.o, e = this.t;
    if (R && t === void 0) {
      let o = e !== void 0 && e.length === 1;
      o && (t = tt.get(e)), t === void 0 && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), o && tt.set(e, t));
    }
    return t;
  }
  toString() {
    return this.cssText;
  }
};
var et = (r3) => new S(typeof r3 == "string" ? r3 : r3 + "", void 0, M);
var j2 = (r3, ...t) => {
  let e = r3.length === 1 ? r3[0] : t.reduce((o, i, n) => o + ((s) => {
    if (s._$cssResult$ === true)
      return s.cssText;
    if (typeof s == "number")
      return s;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + s + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(i) + r3[n + 1], r3[0]);
  return new S(e, r3, M);
};
var L = (r3, t) => {
  R ? r3.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet) : t.forEach((e) => {
    let o = document.createElement("style"), i = N.litNonce;
    i !== void 0 && o.setAttribute("nonce", i), o.textContent = e.cssText, r3.appendChild(o);
  });
};
var O = R ? (r3) => r3 : (r3) => r3 instanceof CSSStyleSheet ? ((t) => {
  let e = "";
  for (let o of t.cssRules)
    e += o.cssText;
  return et(e);
})(r3) : r3;
var B;
var T = window;
var ot = T.trustedTypes;
var xt = ot ? ot.emptyScript : "";
var it = T.reactiveElementPolyfillSupport;
var I2 = { toAttribute(r3, t) {
  switch (t) {
    case Boolean:
      r3 = r3 ? xt : null;
      break;
    case Object:
    case Array:
      r3 = r3 == null ? r3 : JSON.stringify(r3);
  }
  return r3;
}, fromAttribute(r3, t) {
  let e = r3;
  switch (t) {
    case Boolean:
      e = r3 !== null;
      break;
    case Number:
      e = r3 === null ? null : Number(r3);
      break;
    case Object:
    case Array:
      try {
        e = JSON.parse(r3);
      } catch {
        e = null;
      }
  }
  return e;
} };
var rt = (r3, t) => t !== r3 && (t == t || r3 == r3);
var D = { attribute: true, type: String, converter: I2, reflect: false, hasChanged: rt };
var V = "finalized";
var f = class extends HTMLElement {
  constructor() {
    super(), this._$Ei = /* @__PURE__ */ new Map(), this.isUpdatePending = false, this.hasUpdated = false, this._$El = null, this._$Eu();
  }
  static addInitializer(t) {
    var e;
    this.finalize(), ((e = this.h) !== null && e !== void 0 ? e : this.h = []).push(t);
  }
  static get observedAttributes() {
    this.finalize();
    let t = [];
    return this.elementProperties.forEach((e, o) => {
      let i = this._$Ep(o, e);
      i !== void 0 && (this._$Ev.set(i, o), t.push(i));
    }), t;
  }
  static createProperty(t, e = D) {
    if (e.state && (e.attribute = false), this.finalize(), this.elementProperties.set(t, e), !e.noAccessor && !this.prototype.hasOwnProperty(t)) {
      let o = typeof t == "symbol" ? Symbol() : "__" + t, i = this.getPropertyDescriptor(t, o, e);
      i !== void 0 && Object.defineProperty(this.prototype, t, i);
    }
  }
  static getPropertyDescriptor(t, e, o) {
    return { get() {
      return this[e];
    }, set(i) {
      let n = this[t];
      this[e] = i, this.requestUpdate(t, n, o);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t) {
    return this.elementProperties.get(t) || D;
  }
  static finalize() {
    if (this.hasOwnProperty(V))
      return false;
    this[V] = true;
    let t = Object.getPrototypeOf(this);
    if (t.finalize(), t.h !== void 0 && (this.h = [...t.h]), this.elementProperties = new Map(t.elementProperties), this._$Ev = /* @__PURE__ */ new Map(), this.hasOwnProperty("properties")) {
      let e = this.properties, o = [...Object.getOwnPropertyNames(e), ...Object.getOwnPropertySymbols(e)];
      for (let i of o)
        this.createProperty(i, e[i]);
    }
    return this.elementStyles = this.finalizeStyles(this.styles), true;
  }
  static finalizeStyles(t) {
    let e = [];
    if (Array.isArray(t)) {
      let o = new Set(t.flat(1 / 0).reverse());
      for (let i of o)
        e.unshift(O(i));
    } else
      t !== void 0 && e.push(O(t));
    return e;
  }
  static _$Ep(t, e) {
    let o = e.attribute;
    return o === false ? void 0 : typeof o == "string" ? o : typeof t == "string" ? t.toLowerCase() : void 0;
  }
  _$Eu() {
    var t;
    this._$E_ = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$Eg(), this.requestUpdate(), (t = this.constructor.h) === null || t === void 0 || t.forEach((e) => e(this));
  }
  addController(t) {
    var e, o;
    ((e = this._$ES) !== null && e !== void 0 ? e : this._$ES = []).push(t), this.renderRoot !== void 0 && this.isConnected && ((o = t.hostConnected) === null || o === void 0 || o.call(t));
  }
  removeController(t) {
    var e;
    (e = this._$ES) === null || e === void 0 || e.splice(this._$ES.indexOf(t) >>> 0, 1);
  }
  _$Eg() {
    this.constructor.elementProperties.forEach((t, e) => {
      this.hasOwnProperty(e) && (this._$Ei.set(e, this[e]), delete this[e]);
    });
  }
  createRenderRoot() {
    var t;
    let e = (t = this.shadowRoot) !== null && t !== void 0 ? t : this.attachShadow(this.constructor.shadowRootOptions);
    return L(e, this.constructor.elementStyles), e;
  }
  connectedCallback() {
    var t;
    this.renderRoot === void 0 && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t = this._$ES) === null || t === void 0 || t.forEach((e) => {
      var o;
      return (o = e.hostConnected) === null || o === void 0 ? void 0 : o.call(e);
    });
  }
  enableUpdating(t) {
  }
  disconnectedCallback() {
    var t;
    (t = this._$ES) === null || t === void 0 || t.forEach((e) => {
      var o;
      return (o = e.hostDisconnected) === null || o === void 0 ? void 0 : o.call(e);
    });
  }
  attributeChangedCallback(t, e, o) {
    this._$AK(t, o);
  }
  _$EO(t, e, o = D) {
    var i;
    let n = this.constructor._$Ep(t, o);
    if (n !== void 0 && o.reflect === true) {
      let s = (((i = o.converter) === null || i === void 0 ? void 0 : i.toAttribute) !== void 0 ? o.converter : I2).toAttribute(e, o.type);
      this._$El = t, s == null ? this.removeAttribute(n) : this.setAttribute(n, s), this._$El = null;
    }
  }
  _$AK(t, e) {
    var o;
    let i = this.constructor, n = i._$Ev.get(t);
    if (n !== void 0 && this._$El !== n) {
      let s = i.getPropertyOptions(n), h = typeof s.converter == "function" ? { fromAttribute: s.converter } : ((o = s.converter) === null || o === void 0 ? void 0 : o.fromAttribute) !== void 0 ? s.converter : I2;
      this._$El = n, this[n] = h.fromAttribute(e, s.type), this._$El = null;
    }
  }
  requestUpdate(t, e, o) {
    let i = true;
    t !== void 0 && (((o = o || this.constructor.getPropertyOptions(t)).hasChanged || rt)(this[t], e) ? (this._$AL.has(t) || this._$AL.set(t, e), o.reflect === true && this._$El !== t && (this._$EC === void 0 && (this._$EC = /* @__PURE__ */ new Map()), this._$EC.set(t, o))) : i = false), !this.isUpdatePending && i && (this._$E_ = this._$Ej());
  }
  async _$Ej() {
    this.isUpdatePending = true;
    try {
      await this._$E_;
    } catch (e) {
      Promise.reject(e);
    }
    let t = this.scheduleUpdate();
    return t != null && await t, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var t;
    if (!this.isUpdatePending)
      return;
    this.hasUpdated, this._$Ei && (this._$Ei.forEach((i, n) => this[n] = i), this._$Ei = void 0);
    let e = false, o = this._$AL;
    try {
      e = this.shouldUpdate(o), e ? (this.willUpdate(o), (t = this._$ES) === null || t === void 0 || t.forEach((i) => {
        var n;
        return (n = i.hostUpdate) === null || n === void 0 ? void 0 : n.call(i);
      }), this.update(o)) : this._$Ek();
    } catch (i) {
      throw e = false, this._$Ek(), i;
    }
    e && this._$AE(o);
  }
  willUpdate(t) {
  }
  _$AE(t) {
    var e;
    (e = this._$ES) === null || e === void 0 || e.forEach((o) => {
      var i;
      return (i = o.hostUpdated) === null || i === void 0 ? void 0 : i.call(o);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t)), this.updated(t);
  }
  _$Ek() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$E_;
  }
  shouldUpdate(t) {
    return true;
  }
  update(t) {
    this._$EC !== void 0 && (this._$EC.forEach((e, o) => this._$EO(o, this[o], e)), this._$EC = void 0), this._$Ek();
  }
  updated(t) {
  }
  firstUpdated(t) {
  }
};
f[V] = true, f.elementProperties = /* @__PURE__ */ new Map(), f.elementStyles = [], f.shadowRootOptions = { mode: "open" }, it == null || it({ ReactiveElement: f }), ((B = T.reactiveElementVersions) !== null && B !== void 0 ? B : T.reactiveElementVersions = []).push("1.6.3");
var K;
var z = window;
var y = z.trustedTypes;
var st = y ? y.createPolicy("lit-html", { createHTML: (r3) => r3 }) : void 0;
var q = "$lit$";
var g2 = `lit$${(Math.random() + "").slice(9)}$`;
var dt = "?" + g2;
var yt = `<${dt}>`;
var m = document;
var k = () => m.createComment("");
var C = (r3) => r3 === null || typeof r3 != "object" && typeof r3 != "function";
var ut = Array.isArray;
var _t = (r3) => ut(r3) || typeof (r3 == null ? void 0 : r3[Symbol.iterator]) == "function";
var W = `[ 	
\f\r]`;
var E = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var nt = /-->/g;
var lt = />/g;
var b = RegExp(`>|${W}(?:([^\\s"'>=/]+)(${W}*=${W}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var at = /'/g;
var ht = /"/g;
var vt = /^(?:script|style|textarea|title)$/i;
var ft = (r3) => (t, ...e) => ({ _$litType$: r3, strings: t, values: e });
var Ut = ft(1);
var x = Symbol.for("lit-noChange");
var d = Symbol.for("lit-nothing");
var ct = /* @__PURE__ */ new WeakMap();
var $ = m.createTreeWalker(m, 129, null, false);
function gt(r3, t) {
  if (!Array.isArray(r3) || !r3.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return st !== void 0 ? st.createHTML(t) : t;
}
var At = (r3, t) => {
  let e = r3.length - 1, o = [], i, n = t === 2 ? "<svg>" : "", s = E;
  for (let h = 0; h < e; h++) {
    let l = r3[h], a2, c, p2 = -1, u = 0;
    for (; u < l.length && (s.lastIndex = u, c = s.exec(l), c !== null); )
      u = s.lastIndex, s === E ? c[1] === "!--" ? s = nt : c[1] !== void 0 ? s = lt : c[2] !== void 0 ? (vt.test(c[2]) && (i = RegExp("</" + c[2], "g")), s = b) : c[3] !== void 0 && (s = b) : s === b ? c[0] === ">" ? (s = i != null ? i : E, p2 = -1) : c[1] === void 0 ? p2 = -2 : (p2 = s.lastIndex - c[2].length, a2 = c[1], s = c[3] === void 0 ? b : c[3] === '"' ? ht : at) : s === ht || s === at ? s = b : s === nt || s === lt ? s = E : (s = b, i = void 0);
    let v2 = s === b && r3[h + 1].startsWith("/>") ? " " : "";
    n += s === E ? l + yt : p2 >= 0 ? (o.push(a2), l.slice(0, p2) + q + l.slice(p2) + g2 + v2) : l + g2 + (p2 === -2 ? (o.push(void 0), h) : v2);
  }
  return [gt(r3, n + (r3[e] || "<?>") + (t === 2 ? "</svg>" : "")), o];
};
var U = class r {
  constructor({ strings: t, _$litType$: e }, o) {
    let i;
    this.parts = [];
    let n = 0, s = 0, h = t.length - 1, l = this.parts, [a2, c] = At(t, e);
    if (this.el = r.createElement(a2, o), $.currentNode = this.el.content, e === 2) {
      let p2 = this.el.content, u = p2.firstChild;
      u.remove(), p2.append(...u.childNodes);
    }
    for (; (i = $.nextNode()) !== null && l.length < h; ) {
      if (i.nodeType === 1) {
        if (i.hasAttributes()) {
          let p2 = [];
          for (let u of i.getAttributeNames())
            if (u.endsWith(q) || u.startsWith(g2)) {
              let v2 = c[s++];
              if (p2.push(u), v2 !== void 0) {
                let mt = i.getAttribute(v2.toLowerCase() + q).split(g2), H = /([.?@])?(.*)/.exec(v2);
                l.push({ type: 1, index: n, name: H[2], strings: mt, ctor: H[1] === "." ? F : H[1] === "?" ? Z : H[1] === "@" ? G : A });
              } else
                l.push({ type: 6, index: n });
            }
          for (let u of p2)
            i.removeAttribute(u);
        }
        if (vt.test(i.tagName)) {
          let p2 = i.textContent.split(g2), u = p2.length - 1;
          if (u > 0) {
            i.textContent = y ? y.emptyScript : "";
            for (let v2 = 0; v2 < u; v2++)
              i.append(p2[v2], k()), $.nextNode(), l.push({ type: 2, index: ++n });
            i.append(p2[u], k());
          }
        }
      } else if (i.nodeType === 8)
        if (i.data === dt)
          l.push({ type: 2, index: n });
        else {
          let p2 = -1;
          for (; (p2 = i.data.indexOf(g2, p2 + 1)) !== -1; )
            l.push({ type: 7, index: n }), p2 += g2.length - 1;
        }
      n++;
    }
  }
  static createElement(t, e) {
    let o = m.createElement("template");
    return o.innerHTML = t, o;
  }
};
function _(r3, t, e = r3, o) {
  var i, n, s, h;
  if (t === x)
    return t;
  let l = o !== void 0 ? (i = e._$Co) === null || i === void 0 ? void 0 : i[o] : e._$Cl, a2 = C(t) ? void 0 : t._$litDirective$;
  return (l == null ? void 0 : l.constructor) !== a2 && ((n = l == null ? void 0 : l._$AO) === null || n === void 0 || n.call(l, false), a2 === void 0 ? l = void 0 : (l = new a2(r3), l._$AT(r3, e, o)), o !== void 0 ? ((s = (h = e)._$Co) !== null && s !== void 0 ? s : h._$Co = [])[o] = l : e._$Cl = l), l !== void 0 && (t = _(r3, l._$AS(r3, t.values), l, o)), t;
}
var J = class {
  constructor(t, e) {
    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t) {
    var e;
    let { el: { content: o }, parts: i } = this._$AD, n = ((e = t == null ? void 0 : t.creationScope) !== null && e !== void 0 ? e : m).importNode(o, true);
    $.currentNode = n;
    let s = $.nextNode(), h = 0, l = 0, a2 = i[0];
    for (; a2 !== void 0; ) {
      if (h === a2.index) {
        let c;
        a2.type === 2 ? c = new P(s, s.nextSibling, this, t) : a2.type === 1 ? c = new a2.ctor(s, a2.name, a2.strings, this, t) : a2.type === 6 && (c = new Q(s, this, t)), this._$AV.push(c), a2 = i[++l];
      }
      h !== (a2 == null ? void 0 : a2.index) && (s = $.nextNode(), h++);
    }
    return $.currentNode = m, n;
  }
  v(t) {
    let e = 0;
    for (let o of this._$AV)
      o !== void 0 && (o.strings !== void 0 ? (o._$AI(t, o, e), e += o.strings.length - 2) : o._$AI(t[e])), e++;
  }
};
var P = class r2 {
  constructor(t, e, o, i) {
    var n;
    this.type = 2, this._$AH = d, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = o, this.options = i, this._$Cp = (n = i == null ? void 0 : i.isConnected) === null || n === void 0 || n;
  }
  get _$AU() {
    var t, e;
    return (e = (t = this._$AM) === null || t === void 0 ? void 0 : t._$AU) !== null && e !== void 0 ? e : this._$Cp;
  }
  get parentNode() {
    let t = this._$AA.parentNode, e = this._$AM;
    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t, e = this) {
    t = _(this, t, e), C(t) ? t === d || t == null || t === "" ? (this._$AH !== d && this._$AR(), this._$AH = d) : t !== this._$AH && t !== x && this._(t) : t._$litType$ !== void 0 ? this.g(t) : t.nodeType !== void 0 ? this.$(t) : _t(t) ? this.T(t) : this._(t);
  }
  k(t) {
    return this._$AA.parentNode.insertBefore(t, this._$AB);
  }
  $(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.k(t));
  }
  _(t) {
    this._$AH !== d && C(this._$AH) ? this._$AA.nextSibling.data = t : this.$(m.createTextNode(t)), this._$AH = t;
  }
  g(t) {
    var e;
    let { values: o, _$litType$: i } = t, n = typeof i == "number" ? this._$AC(t) : (i.el === void 0 && (i.el = U.createElement(gt(i.h, i.h[0]), this.options)), i);
    if (((e = this._$AH) === null || e === void 0 ? void 0 : e._$AD) === n)
      this._$AH.v(o);
    else {
      let s = new J(n, this), h = s.u(this.options);
      s.v(o), this.$(h), this._$AH = s;
    }
  }
  _$AC(t) {
    let e = ct.get(t.strings);
    return e === void 0 && ct.set(t.strings, e = new U(t)), e;
  }
  T(t) {
    ut(this._$AH) || (this._$AH = [], this._$AR());
    let e = this._$AH, o, i = 0;
    for (let n of t)
      i === e.length ? e.push(o = new r2(this.k(k()), this.k(k()), this, this.options)) : o = e[i], o._$AI(n), i++;
    i < e.length && (this._$AR(o && o._$AB.nextSibling, i), e.length = i);
  }
  _$AR(t = this._$AA.nextSibling, e) {
    var o;
    for ((o = this._$AP) === null || o === void 0 || o.call(this, false, true, e); t && t !== this._$AB; ) {
      let i = t.nextSibling;
      t.remove(), t = i;
    }
  }
  setConnected(t) {
    var e;
    this._$AM === void 0 && (this._$Cp = t, (e = this._$AP) === null || e === void 0 || e.call(this, t));
  }
};
var A = class {
  constructor(t, e, o, i, n) {
    this.type = 1, this._$AH = d, this._$AN = void 0, this.element = t, this.name = e, this._$AM = i, this.options = n, o.length > 2 || o[0] !== "" || o[1] !== "" ? (this._$AH = Array(o.length - 1).fill(new String()), this.strings = o) : this._$AH = d;
  }
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t, e = this, o, i) {
    let n = this.strings, s = false;
    if (n === void 0)
      t = _(this, t, e, 0), s = !C(t) || t !== this._$AH && t !== x, s && (this._$AH = t);
    else {
      let h = t, l, a2;
      for (t = n[0], l = 0; l < n.length - 1; l++)
        a2 = _(this, h[o + l], e, l), a2 === x && (a2 = this._$AH[l]), s || (s = !C(a2) || a2 !== this._$AH[l]), a2 === d ? t = d : t !== d && (t += (a2 != null ? a2 : "") + n[l + 1]), this._$AH[l] = a2;
    }
    s && !i && this.j(t);
  }
  j(t) {
    t === d ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t != null ? t : "");
  }
};
var F = class extends A {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t) {
    this.element[this.name] = t === d ? void 0 : t;
  }
};
var wt = y ? y.emptyScript : "";
var Z = class extends A {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t) {
    t && t !== d ? this.element.setAttribute(this.name, wt) : this.element.removeAttribute(this.name);
  }
};
var G = class extends A {
  constructor(t, e, o, i, n) {
    super(t, e, o, i, n), this.type = 5;
  }
  _$AI(t, e = this) {
    var o;
    if ((t = (o = _(this, t, e, 0)) !== null && o !== void 0 ? o : d) === x)
      return;
    let i = this._$AH, n = t === d && i !== d || t.capture !== i.capture || t.once !== i.once || t.passive !== i.passive, s = t !== d && (i === d || n);
    n && this.element.removeEventListener(this.name, this, i), s && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }
  handleEvent(t) {
    var e, o;
    typeof this._$AH == "function" ? this._$AH.call((o = (e = this.options) === null || e === void 0 ? void 0 : e.host) !== null && o !== void 0 ? o : this.element, t) : this._$AH.handleEvent(t);
  }
};
var Q = class {
  constructor(t, e, o) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = o;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t) {
    _(this, t);
  }
};
var pt = z.litHtmlPolyfillSupport;
pt == null || pt(U, P), ((K = z.litHtmlVersions) !== null && K !== void 0 ? K : z.litHtmlVersions = []).push("2.8.0");
var bt = (r3, t, e) => {
  var o, i;
  let n = (o = e == null ? void 0 : e.renderBefore) !== null && o !== void 0 ? o : t, s = n._$litPart$;
  if (s === void 0) {
    let h = (i = e == null ? void 0 : e.renderBefore) !== null && i !== void 0 ? i : null;
    n._$litPart$ = s = new P(t.insertBefore(k(), h), h, void 0, e != null ? e : {});
  }
  return s._$AI(r3), s;
};
var X;
var Y;
var w = class extends f {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var t, e;
    let o = super.createRenderRoot();
    return (t = (e = this.renderOptions).renderBefore) !== null && t !== void 0 || (e.renderBefore = o.firstChild), o;
  }
  update(t) {
    let e = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = bt(e, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t;
    super.connectedCallback(), (t = this._$Do) === null || t === void 0 || t.setConnected(true);
  }
  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), (t = this._$Do) === null || t === void 0 || t.setConnected(false);
  }
  render() {
    return x;
  }
};
w.finalized = true, w._$litElement$ = true, (X = globalThis.litElementHydrateSupport) === null || X === void 0 || X.call(globalThis, { LitElement: w });
var $t = globalThis.litElementPolyfillSupport;
$t == null || $t({ LitElement: w });
((Y = globalThis.litElementVersions) !== null && Y !== void 0 ? Y : globalThis.litElementVersions = []).push("3.3.3");
var Kt = j2`
  @font-face {
    font-family: 'Karla';
    font-weight: regular;
    src: url('./fonts/Karla-regular.woff') format('woff');
  }

  * {
    box-sizing: border-box;
  }

  :host {
    --lottie-player-toolbar-height: 35px;
    --lottie-player-toolbar-background-color: transparent;
    --lottie-player-toolbar-hover-background-color: #f3f6f8;
    --lottie-player-toolbar-icon-color: #20272c;
    --lottie-player-toolbar-icon-hover-color: #f3f6f8;
    --lottie-player-toolbar-icon-active-color: #00ddb3;
    --lottie-player-seeker-track-color: #00ddb3;
    --lottie-player-seeker-accent-color: #00c1a2;
    --lottie-player-seeker-thumb-color: #00c1a2;
    --lottie-player-options-separator: #d9e0e6;

    display: block;
    width: 100%;
    height: 100%;

    font-family: 'Karla', sans-serif;
    font-style: normal;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .active {
    color: var(--lottie-player-toolbar-icon-active-color) !important;
  }

  .main {
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%;
  }

  .animation {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
  }
  .animation.controls {
    height: calc(100% - var(--lottie-player-toolbar-height));
  }

  .toolbar {
    display: flex;
    align-items: center;
    justify-items: center;
    background-color: var(--lottie-player-toolbar-background-color);
    margin: 0 8px;
    height: var(--lottie-player-toolbar-height);
  }

  .btn-spacing-left {
    margin-right: 4px;
    margin-left: 8px;
  }

  .btn-spacing-center {
    margin-right: 4px;
    margin-left: 4px;
  }

  .btn-spacing-right {
    margin-right: 8px;
    margin-left: 4px;
  }

  .toolbar button {
    color: #20272c;
    cursor: pointer;
    fill: var(--lottie-player-toolbar-icon-color);
    display: flex;
    background: none;
    border: 0px;
    border-radius: 4px;
    padding: 4px;
    outline: none;
    width: 24px;
    height: 24px;
    align-items: center;
  }

  .toolbar button:hover {
    background-color: var(--lottie-player-toolbar-icon-hover-color);
    border-style: solid;
    border-radius: 2px;
  }

  .toolbar button.active {
    fill: var(--lottie-player-toolbar-icon-active-color);
  }

  .toolbar button.active:hover {
    fill: var(--lottie-player-toolbar-icon-hover-color);
    border-radius: 4px;
  }

  .toolbar button:focus-visible {
    outline: 2px solid var(--lottie-player-toolbar-icon-active-color);
    border-radius: 4px;
    box-sizing: border-box;
  }

  .toolbar button svg {
    width: 16px;
    height: 16px;
  }

  .toolbar button.disabled svg {
    display: none;
  }

  .popover {
    position: absolute;
    bottom: 40px;
    left: calc(100% - 239px);
    width: 224px;
    min-height: 84px;
    max-height: 300px;
    background-color: #ffffff;
    box-shadow: 0px 8px 48px 0px rgba(243, 246, 248, 0.15), 0px 8px 16px 0px rgba(61, 72, 83, 0.16),
      0px 0px 1px 0px rgba(61, 72, 83, 0.36);
    border-radius: 8px;
    padding: 8px;
    z-index: 100;
    overflow-y: scroll;
    scrollbar-width: none;
  }
  .popover:focus-visible {
    outline: 2px solid var(--lottie-player-toolbar-icon-active-color);
    border-radius: 4px;
    box-sizing: border-box;
  }

  .popover::-webkit-scrollbar {
    width: 0px;
  }

  .popover-button {
    background: none;
    border: none;
    font-family: inherit;
    width: 100%;
    flex-direction: row;
    cursor: pointer;
    height: 32px;
    color: #20272c;
    justify-content: space-between;
    display: flex;
    padding: 4px 8px;
    align-items: flex-start;
    gap: 8px;
    align-self: stretch;
    border-radius: 4px;
  }

  .popover-button:focus-visible {
    outline: 2px solid var(--lottie-player-toolbar-icon-active-color);
    border-radius: 4px;
    box-sizing: border-box;
  }

  .popover-button:hover {
    background-color: var(--lottie-player-toolbar-hover-background-color);
  }

  .popover-button-text {
    display: flex;
    color: #20272c;
    flex-direction: column;
    align-self: stretch;
    justify-content: center;
    font-family: inherit;
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
    letter-spacing: -0.28px;
  }

  .reset-btn {
    font-size: 12px;
    cursor: pointer;
    font-family: inherit;
    background: none;
    border: none;
    font-weight: 400;
    line-height: 18px;
    letter-spacing: 0em;
    text-align: left;
    color: #63727e;
    padding: 0;
    width: 31px;
    height: 18px;
  }
  .reset-btn:focus-visible {
    outline: 2px solid var(--lottie-player-toolbar-icon-active-color);
    border-radius: 4px;
    box-sizing: border-box;
  }
  .reset-btn:hover {
    color: #20272c;
  }

  .option-title-button {
    display: flex;
    flex-direction: row;
    width: 100%;
    height: 32px;
    align-items: center;
    gap: 4px;
    align-self: stretch;
    cursor: pointer;
    color: var(--lottie-player-toolbar-icon-color);
    border: none;
    background: none;
    padding: 4px;
    font-family: inherit;
    font-size: 16px;
    font-weight: 700;
    line-height: 150%;
    letter-spacing: -0.32px;
  }
  .option-title-button.themes {
    width: auto;
    padding: 0;
  }
  .option-title-button:hover {
    background-color: var(--lottie-player-toolbar-icon-hover-color);
  }

  .option-title-themes-row {
    display: flex;
    align-items: center;
    gap: 8px;
    flex: 1 0 0;
  }
  .option-title-themes-row:hover {
    background-color: var(--lottie-player-toolbar-icon-hover-color);
  }

  .option-title-button:focus-visible {
    outline: 2px solid var(--lottie-player-toolbar-icon-active-color);
    border-radius: 4px;
    box-sizing: border-box;
  }

  .option-title-text {
    font-size: 16px;
    font-style: normal;
    font-weight: 700;
    line-height: 150%;
    letter-spacing: -0.32px;
  }

  .option-title-separator {
    margin: 8px -8px;
    border-bottom: 1px solid var(--lottie-player-options-separator);
  }

  .option-title-chevron {
    display: flex;
    padding: 4px;
    border-radius: 8px;
    justify-content: center;
    align-items: center;
    gap: 8px;
  }

  .option-row {
    display: flex;
    flex-direction: column;
  }
  .option-row > ul {
    padding: 0;
    margin: 0;
  }

  .option-button {
    width: 100%;
    background: none;
    border: none;
    font-family: inherit;
    display: flex;
    padding: 4px 8px;
    color: #20272c;
    overflow: hidden;
    align-items: center;
    gap: 8px;
    align-self: stretch;
    cursor: pointer;
    height: 32px;
    font-family: inherit;
    font-size: 14px;
    border-radius: 4px;
  }
  .option-button:hover {
    background-color: var(--lottie-player-toolbar-hover-background-color);
  }
  .option-button:focus-visible {
    outline: 2px solid var(--lottie-player-toolbar-icon-active-color);
    border-radius: 4px;
    box-sizing: border-box;
  }

  .option-tick {
    display: flex;
    width: 24px;
    height: 24px;
    align-items: flex-start;
    gap: 8px;
  }

  .seeker {
    height: 4px;
    width: 95%;
    outline: none;
    -webkit-appearance: none;
    -moz-apperance: none;
    border-radius: 9999px;
    cursor: pointer;
    background-image: linear-gradient(
      to right,
      rgb(0, 221, 179) calc(var(--seeker) * 1%),
      rgb(217, 224, 230) calc(var(--seeker) * 1%)
    );
  }
  .seeker.to-left {
    background-image: linear-gradient(
      to right,
      rgb(217, 224, 230) calc(var(--seeker) * 1%),
      rgb(0, 221, 179) calc(var(--seeker) * 1%)
    );
  }
  .seeker::-webkit-slider-runnable-track:focus-visible {
    color: #f07167;
    accent-color: #00ddb3;
  }

  .seeker::-webkit-slider-runnable-track {
    width: 100%;
    height: 5px;
    cursor: pointer;
  }
  .seeker::-webkit-slider-thumb {
    -webkit-appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: var(--lottie-player-seeker-thumb-color);
    cursor: pointer;
    margin-top: -5px;
  }
  .seeker:focus-visible::-webkit-slider-thumb {
    background: var(--lottie-player-seeker-thumb-color);
    outline: 2px solid var(--lottie-player-seeker-track-color);
    border: 1.5px solid #ffffff;
  }
  .seeker::-webkit-slider-thumb:hover {
    background: #019d91;
  }
  .seeker::-moz-range-thumb {
    appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: var(--lottie-player-seeker-thumb-color);
    cursor: pointer;
    margin-top: -5px;
    border-color: transparent;
  }
  .seeker:focus-visible::-moz-range-thumb {
    background: var(--lottie-player-seeker-thumb-color);
    outline: 2px solid var(--lottie-player-seeker-track-color);
    border: 1.5px solid #ffffff;
  }

  .error {
    display: flex;
    justify-content: center;
    margin: auto;
    height: 100%;
    align-items: center;
  }
`;

// node_modules/@dotlottie/player-component/dist/dotlottie-player.mjs
var M2 = (r3, t) => t.kind === "method" && t.descriptor && !("value" in t.descriptor) ? { ...t, finisher(e) {
  e.createProperty(t.key, r3);
} } : { kind: "field", key: Symbol(), placement: "own", descriptor: {}, originalKey: t.key, initializer() {
  typeof t.initializer == "function" && (this[t.key] = t.initializer.call(this));
}, finisher(e) {
  e.createProperty(t.key, r3);
} };
var x2 = (r3, t, e) => {
  t.constructor.createProperty(e, r3);
};
function p(r3) {
  return (t, e) => e !== void 0 ? x2(r3, t, e) : M2(r3, t);
}
function k2(r3) {
  return p({ ...r3, state: true });
}
var v = ({ finisher: r3, descriptor: t }) => (e, i) => {
  var n;
  if (i === void 0) {
    let l = (n = e.originalKey) !== null && n !== void 0 ? n : e.key, h = t != null ? { kind: "method", placement: "prototype", key: l, descriptor: t(e.key) } : { ...e, key: l };
    return r3 != null && (h.finisher = function(b2) {
      r3(b2, l);
    }), h;
  }
  {
    let l = e.constructor;
    t !== void 0 && Object.defineProperty(e, i, t(i)), r3 == null || r3(l, i);
  }
};
function O2(r3, t) {
  return v({ descriptor: (e) => {
    let i = { get() {
      var n, l;
      return (l = (n = this.renderRoot) === null || n === void 0 ? void 0 : n.querySelector(r3)) !== null && l !== void 0 ? l : null;
    }, enumerable: true, configurable: true };
    if (t) {
      let n = typeof e == "symbol" ? Symbol() : "__" + e;
      i.get = function() {
        var l, h;
        return this[n] === void 0 && (this[n] = (h = (l = this.renderRoot) === null || l === void 0 ? void 0 : l.querySelector(r3)) !== null && h !== void 0 ? h : null), this[n];
      };
    }
    return i;
  } });
}
var L2;
((L2 = window.HTMLSlotElement) === null || L2 === void 0 ? void 0 : L2.prototype.assignedElements) != null ? (r3, t) => r3.assignedElements(t) : (r3, t) => r3.assignedNodes(t).filter((e) => e.nodeType === Node.ELEMENT_NODE);
var I3 = { name: "@dotlottie/player-component", version: "2.7.6", description: "dotLottie animation player web component.", repository: "https://github.com/dotlottie/player-component.git", homepage: "https://dotlottie.com/players", bugs: "https://github.com/dotlottie/player-component/issues", author: "Jawish Hameed <jawish@lottiefiles.com>", license: "MIT", main: "dist/dotlottie-player.js", module: "dist/dotlottie-player.mjs", types: "dist/dotlottie-player.d.ts", files: ["dist"], keywords: ["dotlottie", "animation", "web component", "component", "lit-element", "player"], scripts: { build: "tsup", "cypress:open": "cypress open --component", dev: "tsup --watch", lint: "eslint .", "lint:fix": "eslint --fix", test: "cypress run --component", "type-check": "tsc --noEmit" }, dependencies: { "@dotlottie/common": "workspace:*", lit: "^2.7.5" }, devDependencies: { "@vitejs/plugin-legacy": "^4.1.0", "axe-core": "^4.7.2", cypress: "^12.11.0", "cypress-axe": "^1.4.0", "cypress-ct-lit": "^0.3.2", "lottie-web": "^5.12.2", terser: "^5.19.0", tsup: "^7.2.0", typescript: "^4.7.4", vite: "^4.3.9" }, publishConfig: { access: "public" }, browserslist: ["> 3%"] };
var T2 = "dotlottie-player";
var a = class extends w {
  constructor() {
    super(...arguments);
    __publicField(this, "defaultTheme", "");
    __publicField(this, "container");
    __publicField(this, "playMode", en.Normal);
    __publicField(this, "autoplay", false);
    __publicField(this, "background", "transparent");
    __publicField(this, "controls", false);
    __publicField(this, "direction", 1);
    __publicField(this, "hover", false);
    __publicField(this, "loop");
    __publicField(this, "renderer", "svg");
    __publicField(this, "speed", 1);
    __publicField(this, "src");
    __publicField(this, "intermission", 0);
    __publicField(this, "activeAnimationId", null);
    __publicField(this, "light", false);
    __publicField(this, "worker", false);
    __publicField(this, "activeStateId");
    __publicField(this, "_seeker", 0);
    __publicField(this, "_dotLottieCommonPlayer");
    __publicField(this, "_io");
    __publicField(this, "_loop");
    __publicField(this, "_renderer", "svg");
    __publicField(this, "_unsubscribeListeners");
    __publicField(this, "_hasMultipleAnimations", false);
    __publicField(this, "_hasMultipleThemes", false);
    __publicField(this, "_hasMultipleStates", false);
    __publicField(this, "_popoverIsOpen", false);
    __publicField(this, "_animationsTabIsOpen", false);
    __publicField(this, "_statesTabIsOpen", false);
    __publicField(this, "_styleTabIsOpen", false);
    __publicField(this, "_themesForCurrentAnimation", []);
    __publicField(this, "_statesForCurrentAnimation", []);
  }
  _parseLoop(t) {
    let e = parseInt(t, 10);
    return Number.isInteger(e) && e > 0 ? (this._loop = e, e) : typeof t == "string" && ["true", "false"].includes(t) ? (this._loop = t === "true", this._loop) : (I("loop must be a positive integer or a boolean"), false);
  }
  _handleSeekChange(t) {
    let e = t.currentTarget;
    try {
      let i = parseInt(e.value, 10);
      if (!this._dotLottieCommonPlayer)
        return;
      let n = i / 100 * this._dotLottieCommonPlayer.totalFrames;
      this.seek(n);
    } catch {
      throw g("Error while seeking animation");
    }
  }
  _initListeners() {
    let t = this._dotLottieCommonPlayer;
    if (t === void 0) {
      I("player not initialized - cannot add event listeners", "dotlottie-player-component");
      return;
    }
    this._unsubscribeListeners = t.state.subscribe((e$1, i) => {
      this._seeker = e$1.seeker, this.requestUpdate(), i.currentState !== e$1.currentState && this.dispatchEvent(new CustomEvent(e$1.currentState)), this.dispatchEvent(new CustomEvent(Zi.Frame, { detail: { frame: e$1.frame, seeker: e$1.seeker } })), this.dispatchEvent(new CustomEvent(Zi.VisibilityChange, { detail: { visibilityPercentage: e$1.visibilityPercentage } }));
    }), t.addEventListener("complete", () => {
      this.dispatchEvent(new CustomEvent(Zi.Complete));
    }), t.addEventListener("loopComplete", () => {
      this.dispatchEvent(new CustomEvent(Zi.LoopComplete));
    }), t.addEventListener("DOMLoaded", () => {
      let e$1 = this.getManifest();
      e$1 && e$1.themes && (this._themesForCurrentAnimation = e$1.themes.filter((i) => i.animations.includes(this.getCurrentAnimationId() || ""))), e$1 && e$1.states && (this._hasMultipleStates = e$1.states.length > 0, this._statesForCurrentAnimation = [], e$1.states.forEach((i) => {
        this._statesForCurrentAnimation.push(i);
      })), this.dispatchEvent(new CustomEvent(Zi.Ready));
    }), t.addEventListener("data_ready", () => {
      this.dispatchEvent(new CustomEvent(Zi.DataReady));
    }), t.addEventListener("data_failed", () => {
      this.dispatchEvent(new CustomEvent(Zi.DataFail));
    }), window && window.addEventListener("click", (e) => this._clickOutListener(e));
  }
  async load(t, e, i) {
    if (!this.shadowRoot)
      return;
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.destroy(), this._dotLottieCommonPlayer = new wn(t, this.container, { rendererSettings: e != null ? e : { scaleMode: "noScale", clearCanvas: true, progressiveLoad: true, hideOnTransparent: true }, hover: this.hasAttribute("hover") ? this.hover : void 0, renderer: this.hasAttribute("renderer") ? this._renderer : void 0, loop: this.hasAttribute("loop") ? this._loop : void 0, direction: this.hasAttribute("direction") ? this.direction === 1 ? 1 : -1 : void 0, speed: this.hasAttribute("speed") ? this.speed : void 0, intermission: this.hasAttribute("intermission") ? Number(this.intermission) : void 0, playMode: this.hasAttribute("playMode") ? this.playMode : void 0, autoplay: this.hasAttribute("autoplay") ? this.autoplay : void 0, activeAnimationId: this.hasAttribute("activeAnimationId") ? this.activeAnimationId : void 0, defaultTheme: this.hasAttribute("defaultTheme") ? this.defaultTheme : void 0, light: this.light, worker: this.worker, activeStateId: this.hasAttribute("activeStateId") ? this.activeStateId : void 0 }), await this._dotLottieCommonPlayer.load(i);
    let n = this.getManifest();
    this._hasMultipleAnimations = this.animationCount() > 1, n && (n.themes && (this._themesForCurrentAnimation = n.themes.filter((l) => l.animations.includes(this.getCurrentAnimationId() || "")), this._hasMultipleThemes = n.themes.length > 0), n.states && (this._hasMultipleStates = n.states.length > 0, this._statesForCurrentAnimation = [], n.states.forEach((l) => {
      this._statesForCurrentAnimation.push(l);
    }))), this._initListeners();
  }
  getCurrentAnimationId() {
    var t;
    return (t = this._dotLottieCommonPlayer) == null ? void 0 : t.currentAnimationId;
  }
  animationCount() {
    var t;
    return this._dotLottieCommonPlayer && ((t = this._dotLottieCommonPlayer.getManifest()) == null ? void 0 : t.animations.length) || 0;
  }
  animations() {
    if (!this._dotLottieCommonPlayer)
      return [];
    let t = this._dotLottieCommonPlayer.getManifest();
    return (t == null ? void 0 : t.animations.map((e) => e.id)) || [];
  }
  currentAnimation() {
    return !this._dotLottieCommonPlayer || !this._dotLottieCommonPlayer.currentAnimationId ? "" : this._dotLottieCommonPlayer.currentAnimationId;
  }
  getState() {
    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.getState() : nn;
  }
  getManifest() {
    var t;
    return (t = this._dotLottieCommonPlayer) == null ? void 0 : t.getManifest();
  }
  getLottie() {
    var t;
    return (t = this._dotLottieCommonPlayer) == null ? void 0 : t.getAnimationInstance();
  }
  getVersions() {
    return { lottieWebVersion: wn.getLottieWebVersion(), dotLottiePlayerVersion: `${I3.version}` };
  }
  previous(t) {
    var e;
    (e = this._dotLottieCommonPlayer) == null || e.previous(t);
  }
  next(t) {
    var e;
    (e = this._dotLottieCommonPlayer) == null || e.next(t);
  }
  reset() {
    var t;
    (t = this._dotLottieCommonPlayer) == null || t.reset();
  }
  play(t, e) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.play(t, e);
  }
  pause() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.pause();
  }
  stop() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.stop();
  }
  playOnShow(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.playOnShow(t);
  }
  stopPlayOnShow() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.stopPlayOnShow();
  }
  playOnScroll(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.playOnScroll(t);
  }
  stopPlayOnScroll() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.stopPlayOnScroll();
  }
  seek(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.seek(t);
  }
  snapshot(t = true) {
    if (!this.shadowRoot)
      return "";
    let e = this.shadowRoot.querySelector(".animation svg"), i = new XMLSerializer().serializeToString(e);
    if (t) {
      let n = document.createElement("a");
      n.href = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(i)}`, n.download = `download_${this._seeker}.svg`, document.body.appendChild(n), n.click(), document.body.removeChild(n);
    }
    return i;
  }
  setTheme(t) {
    var e;
    (e = this._dotLottieCommonPlayer) == null || e.setDefaultTheme(t);
  }
  themes() {
    var e;
    if (!this._dotLottieCommonPlayer)
      return [];
    let t = this._dotLottieCommonPlayer.getManifest();
    return ((e = t == null ? void 0 : t.themes) == null ? void 0 : e.map((i) => i.id)) || [];
  }
  getDefaultTheme() {
    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.defaultTheme : "";
  }
  getActiveStateMachine() {
    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.activeStateId : "";
  }
  _freeze() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.freeze();
  }
  setSpeed(t = 1) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setSpeed(t);
  }
  setDirection(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setDirection(t);
  }
  setLooping(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setLoop(t);
  }
  isLooping() {
    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.loop : false;
  }
  togglePlay() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.togglePlay();
  }
  toggleLooping() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.toggleLoop();
  }
  setPlayMode(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setMode(t);
  }
  enterInteractiveMode(t) {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.enterInteractiveMode(t);
  }
  exitInteractiveMode() {
    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.exitInteractiveMode();
  }
  revertToManifestValues(t) {
    var e;
    (e = this._dotLottieCommonPlayer) == null || e.revertToManifestValues(t);
  }
  static get styles() {
    return Kt;
  }
  async firstUpdated() {
    var t;
    this.container = (t = this.shadowRoot) == null ? void 0 : t.querySelector("#animation"), "IntersectionObserver" in window && (this._io = new IntersectionObserver((e) => {
      var i, n;
      e[0] !== void 0 && e[0].isIntersecting ? ((i = this._dotLottieCommonPlayer) == null ? void 0 : i.currentState) === tn.Frozen && this.play() : ((n = this._dotLottieCommonPlayer) == null ? void 0 : n.currentState) === tn.Playing && this._freeze();
    }), this._io.observe(this.container)), this.loop ? this._parseLoop(this.loop) : this.hasAttribute("loop") && this._parseLoop("true"), this.renderer === "svg" ? this._renderer = "svg" : this.renderer === "canvas" ? this._renderer = "canvas" : this.renderer === "html" && (this._renderer = "html"), this.src && await this.load(this.src);
  }
  disconnectedCallback() {
    var t, e;
    this._io && (this._io.disconnect(), this._io = void 0), (t = this._dotLottieCommonPlayer) == null || t.destroy(), (e = this._unsubscribeListeners) == null || e.call(this), window && window.removeEventListener("click", (i) => this._clickOutListener(i));
  }
  _clickOutListener(t) {
    !t.composedPath().some((i) => i instanceof HTMLElement ? i.classList.contains("popover") || i.id === "lottie-animation-options" : false) && this._popoverIsOpen && (this._popoverIsOpen = false, this.requestUpdate());
  }
  renderControls() {
    var i, n, l, h, b2;
    let t = ((i = this._dotLottieCommonPlayer) == null ? void 0 : i.currentState) === tn.Playing, e = ((n = this._dotLottieCommonPlayer) == null ? void 0 : n.currentState) === tn.Paused;
    return Ut`
      <div id="lottie-controls" aria-label="lottie-animation-controls" class="toolbar">
        ${this._hasMultipleAnimations ? Ut`
              <button @click=${() => this.previous()} aria-label="Previous animation" class="btn-spacing-left">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M1.69214 13.5C1.69214 13.7761 1.916 14 2.19214 14C2.46828 14 2.69214 13.7761 2.69214 13.5L2.69214 2.5C2.69214 2.22386 2.46828 2 2.19214 2C1.916 2 1.69214 2.22386 1.69214 2.5V13.5ZM12.5192 13.7828C13.1859 14.174 14.0254 13.6933 14.0254 12.9204L14.0254 3.0799C14.0254 2.30692 13.1859 1.8262 12.5192 2.21747L4.13612 7.13769C3.47769 7.52414 3.47769 8.4761 4.13612 8.86255L12.5192 13.7828Z"
                    fill="#20272C"
                  />
                </svg>
              </button>
            ` : Ut``}
        <button
          id="lottie-play-button"
          @click=${() => {
      this.togglePlay();
    }}
          class=${t || e ? `active ${this._hasMultipleAnimations ? "btn-spacing-center" : "btn-spacing-right"}` : `${this._hasMultipleAnimations ? "btn-spacing-center" : "btn-spacing-right"}`}
          aria-label="play / pause animation"
        >
          ${t ? Ut`
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.99996 2C3.26358 2 2.66663 2.59695 2.66663 3.33333V12.6667C2.66663 13.403 3.26358 14 3.99996 14H5.33329C6.06967 14 6.66663 13.403 6.66663 12.6667V3.33333C6.66663 2.59695 6.06967 2 5.33329 2H3.99996Z"
                    fill="#20272C"
                  />
                  <path
                    d="M10.6666 2C9.93025 2 9.33329 2.59695 9.33329 3.33333V12.6667C9.33329 13.403 9.93025 14 10.6666 14H12C12.7363 14 13.3333 13.403 13.3333 12.6667V3.33333C13.3333 2.59695 12.7363 2 12 2H10.6666Z"
                    fill="#20272C"
                  />
                </svg>
              ` : Ut`
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.33337 3.46787C3.33337 2.52312 4.35948 1.93558 5.17426 2.41379L12.8961 6.94592C13.7009 7.41824 13.7009 8.58176 12.8961 9.05408L5.17426 13.5862C4.35948 14.0644 3.33337 13.4769 3.33337 12.5321V3.46787Z"
                    fill="#20272C"
                  />
                </svg>
              `}
        </button>
        ${this._hasMultipleAnimations ? Ut`
              <button @click=${() => this.next()} aria-label="Next animation" class="btn-spacing-right">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M14.3336 2.5C14.3336 2.22386 14.1097 2 13.8336 2C13.5574 2 13.3336 2.22386 13.3336 2.5V13.5C13.3336 13.7761 13.5574 14 13.8336 14C14.1097 14 14.3336 13.7761 14.3336 13.5V2.5ZM3.50618 2.21722C2.83954 1.82595 2 2.30667 2 3.07965V12.9201C2 13.6931 2.83954 14.1738 3.50618 13.7825L11.8893 8.86231C12.5477 8.47586 12.5477 7.52389 11.8893 7.13745L3.50618 2.21722Z"
                    fill="#20272C"
                  />
                </svg>
              </button>
            ` : Ut``}
        <input
          id="lottie-seeker-input"
          class="seeker ${((l = this._dotLottieCommonPlayer) == null ? void 0 : l.direction) === -1 ? "to-left" : ""}"
          type="range"
          min="0"
          step="1"
          max="100"
          .value=${this._seeker}
          @input=${(s) => this._handleSeekChange(s)}
          @mousedown=${() => {
      this._freeze();
    }}
          @mouseup=${() => {
      var s;
      (s = this._dotLottieCommonPlayer) == null || s.unfreeze();
    }}
          aria-valuemin="1"
          aria-valuemax="100"
          role="slider"
          aria-valuenow=${this._seeker}
          aria-label="lottie-seek-input"
          style=${`--seeker: ${this._seeker}`}
        />
        <button
          id="lottie-loop-toggle"
          @click=${() => this.toggleLooping()}
          class=${(h = this._dotLottieCommonPlayer) != null && h.loop ? "active btn-spacing-left" : "btn-spacing-left"}
          aria-label="loop-toggle"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M10.8654 2.31319C11.0607 2.11793 11.3772 2.11793 11.5725 2.31319L13.4581 4.19881C13.6534 4.39407 13.6534 4.71066 13.4581 4.90592L11.5725 6.79154C11.3772 6.9868 11.0607 6.9868 10.8654 6.79154C10.6701 6.59628 10.6701 6.27969 10.8654 6.08443L11.6162 5.33362H4V6.66695C4 7.03514 3.70152 7.33362 3.33333 7.33362C2.96514 7.33362 2.66666 7.03514 2.66666 6.66695L2.66666 4.66695C2.66666 4.29876 2.96514 4.00028 3.33333 4.00028H11.8454L10.8654 3.0203C10.6701 2.82504 10.6701 2.50846 10.8654 2.31319Z"
              fill="currentColor"
            />
            <path
              d="M12.4375 11.9999C12.8057 11.9999 13.1042 11.7014 13.1042 11.3332V9.33321C13.1042 8.96502 12.8057 8.66655 12.4375 8.66655C12.0693 8.66655 11.7708 8.96502 11.7708 9.33321V10.6665H4.15462L4.90543 9.91573C5.10069 9.72047 5.10069 9.40389 4.90543 9.20862C4.71017 9.01336 4.39359 9.01336 4.19832 9.20862L2.31271 11.0942C2.11744 11.2895 2.11744 11.6061 2.31271 11.8013L4.19832 13.687C4.39359 13.8822 4.71017 13.8822 4.90543 13.687C5.10069 13.4917 5.10069 13.1751 4.90543 12.9799L3.92545 11.9999H12.4375Z"
              fill="currentColor"
            />
          </svg>
        </button>
        ${this._hasMultipleAnimations || this._hasMultipleThemes || this._hasMultipleStates ? Ut`
              <button
                id="lottie-animation-options"
                @click=${() => {
      this._popoverIsOpen = !this._popoverIsOpen, this.requestUpdate();
    }}
                aria-label="options"
                class="btn-spacing-right"
                style=${`background-color: ${this._popoverIsOpen ? "var(--lottie-player-toolbar-icon-hover-color)" : ""}`}
              >
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M8.33337 11.6666C7.78109 11.6666 7.33337 12.1143 7.33337 12.6666C7.33337 13.2189 7.78109 13.6666 8.33337 13.6666C8.88566 13.6666 9.33337 13.2189 9.33337 12.6666C9.33337 12.1143 8.88566 11.6666 8.33337 11.6666Z"
                    fill="#20272C"
                  />
                  <path
                    d="M7.33337 7.99992C7.33337 7.44763 7.78109 6.99992 8.33337 6.99992C8.88566 6.99992 9.33338 7.44763 9.33338 7.99992C9.33338 8.5522 8.88566 8.99992 8.33337 8.99992C7.78109 8.99992 7.33337 8.5522 7.33337 7.99992Z"
                    fill="#20272C"
                  />
                  <path
                    d="M7.33337 3.33325C7.33337 2.78097 7.78109 2.33325 8.33337 2.33325C8.88566 2.33325 9.33338 2.78097 9.33338 3.33325C9.33338 3.88554 8.88566 4.33325 8.33337 4.33325C7.78109 4.33325 7.33337 3.88554 7.33337 3.33325Z"
                    fill="#20272C"
                  />
                </svg>
              </button>
            ` : Ut``}
      </div>
      ${this._popoverIsOpen ? Ut`
            <div
              id="popover"
              class="popover"
              tabindex="0"
              aria-label="lottie animations themes popover"
              style="min-height: ${this.themes().length > 0 ? "84px" : "auto"}"
            >
              ${!this._animationsTabIsOpen && !this._styleTabIsOpen && !this._statesTabIsOpen ? Ut`
                    <button
                      class="popover-button"
                      tabindex="0"
                      aria-label="animations"
                      @click=${() => {
      this._animationsTabIsOpen = !this._animationsTabIsOpen, this.requestUpdate();
    }}
                      @keydown=${(s) => {
      (s.code === "Space" || s.code === "Enter") && (this._animationsTabIsOpen = !this._animationsTabIsOpen, this.requestUpdate());
    }}
                    >
                      <div class="popover-button-text">Animations</div>
                      <div>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z"
                            fill="#4C5863"
                          />
                        </svg>
                      </div>
                    </button>
                  ` : Ut``}
              ${this._hasMultipleThemes && !this._styleTabIsOpen && !this._animationsTabIsOpen && !this._statesTabIsOpen ? Ut` <button
                    class="popover-button"
                    aria-label="Themes"
                    @click=${() => {
      this._styleTabIsOpen = !this._styleTabIsOpen, this.requestUpdate();
    }}
                    @keydown=${(s) => {
      (s.code === "Space" || s.code === "Enter") && (this._styleTabIsOpen = !this._styleTabIsOpen, this.requestUpdate());
    }}
                  >
                    <div class="popover-button-text">Themes</div>
                    <div>
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z"
                          fill="#4C5863"
                        />
                      </svg>
                    </div>
                  </button>` : ""}
              ${this._hasMultipleStates && !this._styleTabIsOpen && !this._animationsTabIsOpen && !this._statesTabIsOpen ? Ut` <button
                    class="popover-button"
                    aria-label="States"
                    @click=${() => {
      this._statesTabIsOpen = !this._statesTabIsOpen, this.requestUpdate();
    }}
                    @keydown=${(s) => {
      (s.code === "Space" || s.code === "Enter") && (this._statesTabIsOpen = !this._statesTabIsOpen, this.requestUpdate());
    }}
                  >
                    <div class="popover-button-text">States</div>
                    <div>
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z"
                          fill="#4C5863"
                        />
                      </svg>
                    </div>
                  </button>` : ""}
              ${this._animationsTabIsOpen ? Ut`<button
                      class="option-title-button"
                      aria-label="Back to main popover menu"
                      @click=${() => {
      this._animationsTabIsOpen = !this._animationsTabIsOpen, this.requestUpdate();
    }}
                    >
                      <div class="option-title-chevron">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z"
                            fill="#20272C"
                          />
                        </svg>
                      </div>
                      <div>Animations</div>
                    </button>
                    <div class="option-title-separator"></div>
                    <div class="option-row">
                      <ul>
                        ${this.animations().map((s) => Ut`
                            <li>
                              <button
                                class="option-button"
                                aria-label=${`${s}`}
                                @click=${() => {
      this._animationsTabIsOpen = !this._animationsTabIsOpen, this._popoverIsOpen = !this._popoverIsOpen, this.play(s), this.requestUpdate();
    }}
                                @keydown=${(c) => {
      (c.code === "Space" || c.code === "Enter") && (this._animationsTabIsOpen = !this._animationsTabIsOpen, this._popoverIsOpen = !this._popoverIsOpen, this.play(s), this.requestUpdate());
    }}
                              >
                                <div class="option-tick">
                                  ${this.currentAnimation() === s ? Ut`
                                        <svg
                                          width="24"
                                          height="24"
                                          viewBox="0 0 24 24"
                                          fill="none"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            fill-rule="evenodd"
                                            clip-rule="evenodd"
                                            d="M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z"
                                            fill="#20272C"
                                          />
                                        </svg>
                                      ` : Ut`<div style="width: 24px; height: 24px"></div>`}
                                </div>
                                <div>${s}</div>
                              </button>
                            </li>
                          `)}
                      </ul>
                    </div> ` : Ut``}
              ${this._styleTabIsOpen ? Ut`<div class="option-title-themes-row">
                      <button
                        class="option-title-button themes"
                        aria-label="Back to main popover menu"
                        @click=${() => {
      this._styleTabIsOpen = !this._styleTabIsOpen, this.requestUpdate();
    }}
                      >
                        <div class="option-title-chevron">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              fill-rule="evenodd"
                              clip-rule="evenodd"
                              d="M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z"
                              fill="#20272C"
                            />
                          </svg>
                        </div>
                        <div class="option-title-text">Themes</div>
                        ${((b2 = this._dotLottieCommonPlayer) == null ? void 0 : b2.defaultTheme) === "" ? Ut`` : Ut`
                              <button
                                class="reset-btn"
                                @click=${() => {
      this.setTheme(""), this.requestUpdate();
    }}
                              >
                                Reset
                              </button>
                            `}
                      </button>
                    </div>
                    <div class="option-title-separator"></div>
                    <div class="option-row">
                      <ul>
                        ${this._themesForCurrentAnimation.map((s) => Ut`
                            <li>
                              <button
                                class="option-button"
                                aria-label="${s.id}"
                                @click=${() => {
      this.setTheme(s.id);
    }}
                                @keydown=${(c) => {
      (c.code === "Space" || c.code === "Enter") && this.setTheme(s.id);
    }}
                              >
                                <div class="option-tick">
                                  ${this.getDefaultTheme() === s.id ? Ut`
                                        <svg
                                          width="24"
                                          height="24"
                                          viewBox="0 0 24 24"
                                          fill="none"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            fill-rule="evenodd"
                                            clip-rule="evenodd"
                                            d="M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z"
                                            fill="#20272C"
                                          />
                                        </svg>
                                      ` : Ut`<div style="width: 24px; height: 24px"></div>`}
                                </div>
                                <div>${s.id}</div>
                              </button>
                            </li>
                          `)}
                      </ul>
                    </div>` : Ut``}
              ${this._statesTabIsOpen ? Ut`<div class="option-title-themes-row">
                      <button
                        class="option-title-button themes"
                        aria-label="Back to main popover menu"
                        @click=${() => {
      this._statesTabIsOpen = !this._statesTabIsOpen, this.requestUpdate();
    }}
                      >
                        <div class="option-title-chevron">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              fill-rule="evenodd"
                              clip-rule="evenodd"
                              d="M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z"
                              fill="#20272C"
                            />
                          </svg>
                        </div>
                        <div class="option-title-text">States</div>
                        <button
                          class="reset-btn"
                          @click=${() => {
      this.exitInteractiveMode(), this.requestUpdate();
    }}
                        >
                          Reset
                        </button>
                      </button>
                    </div>
                    <div class="option-title-separator"></div>
                    <div class="option-row">
                      <ul>
                        ${this._statesForCurrentAnimation.map((s) => Ut`
                            <li>
                              <button
                                class="option-button"
                                aria-label="${s}"
                                @click=${() => {
      this.enterInteractiveMode(s);
    }}
                                @keydown=${(c) => {
      (c.code === "Space" || c.code === "Enter") && this.enterInteractiveMode(s);
    }}
                              >
                                <div class="option-tick">
                                  ${this.getActiveStateMachine() === s ? Ut`
                                        <svg
                                          width="24"
                                          height="24"
                                          viewBox="0 0 24 24"
                                          fill="none"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            fill-rule="evenodd"
                                            clip-rule="evenodd"
                                            d="M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z"
                                            fill="#20272C"
                                          />
                                        </svg>
                                      ` : Ut`<div style="width: 24px; height: 24px"></div>`}
                                </div>
                                <div>${s}</div>
                              </button>
                            </li>
                          `)}
                      </ul>
                    </div>` : Ut``}
            </div>
          ` : Ut``}
    `;
  }
  render() {
    var i;
    let t = this.controls ? "main controls" : "main", e = this.controls ? "animation controls" : "animation";
    return Ut`
      <div id="animation-container" class=${t} lang="en" role="img" aria-label="lottie-animation-container">
        <div id="animation" class=${e} style="background:${this.background};">
          ${((i = this._dotLottieCommonPlayer) == null ? void 0 : i.currentState) === tn.Error ? Ut` <div class="error">⚠️</div> ` : void 0}
        </div>
        ${this.controls ? this.renderControls() : void 0}
      </div>
    `;
  }
};
j([p({ type: String })], a.prototype, "defaultTheme", 2), j([O2("#animation")], a.prototype, "container", 2), j([p()], a.prototype, "playMode", 2), j([p({ type: Boolean })], a.prototype, "autoplay", 2), j([p({ type: String })], a.prototype, "background", 2), j([p({ type: Boolean })], a.prototype, "controls", 2), j([p({ type: Number })], a.prototype, "direction", 2), j([p({ type: Boolean })], a.prototype, "hover", 2), j([p({ type: String })], a.prototype, "loop", 2), j([p({ type: String })], a.prototype, "renderer", 2), j([p({ type: Number })], a.prototype, "speed", 2), j([p({ type: String })], a.prototype, "src", 2), j([p()], a.prototype, "intermission", 2), j([p({ type: String })], a.prototype, "activeAnimationId", 2), j([p({ type: Boolean })], a.prototype, "light", 2), j([p({ type: Boolean })], a.prototype, "worker", 2), j([p({ type: String })], a.prototype, "activeStateId", 2), j([k2()], a.prototype, "_seeker", 2);
customElements.get(T2) || customElements.define(T2, a);
export {
  a as DotLottiePlayer,
  en as PlayMode
};
/*! Bundled license information:

@dotlottie/player-component/dist/chunk-2TNWIAJO.mjs:
  (*! Bundled license information:
  
  @lit/reactive-element/css-tag.js:
    (**
     * @license
     * Copyright 2019 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/reactive-element.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  lit-html/lit-html.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  lit-element/lit-element.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  lit-html/is-server.js:
    (**
     * @license
     * Copyright 2022 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  *)

@dotlottie/player-component/dist/dotlottie-player.mjs:
  (*! Bundled license information:
  
  @lit/reactive-element/decorators/custom-element.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/property.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/state.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/base.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/event-options.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/query.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/query-all.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/query-async.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/query-assigned-elements.js:
    (**
     * @license
     * Copyright 2021 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  
  @lit/reactive-element/decorators/query-assigned-nodes.js:
    (**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     *)
  *)
*/
//# sourceMappingURL=@dotlottie_player-component.js.map
